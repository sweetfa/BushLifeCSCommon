/**
 * Copyright (C) 2012 Bush Life Pty Limited
 * 
 * All rights reserved.  No unauthorised copying or redistribution without the prior written 
 * consent of the management of Bush Life Pty Limited.
 * 
 * www.bushlife.com.au
 * sales@bushlife.com.au
 * 
 * PO Box 865, Redcliffe, QLD, 4020, Australia
 * 
 * 
 * @(#) GenericDAOInterface.cs
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AU.Com.BushLife.Persistence.Hibernate
{
    /// <summary>
    /// A generic interface for providing support for
    /// CRUD operations on any persistent object.
    /// </summary>
    /// <typeparam name="PK">The type of the primary key to use to fetch by primary key</typeparam>
    /// <typeparam name="T">The type of the object in this instance</typeparam>
    public interface GenericDAOInterface<PK,T> : IDisposable
    {
        /// <summary>
        /// Create/Add a new item to the persistence store
        /// </summary>
        /// <param name="newItem">The item to add</param>
        /// <returns>The ID of the new item (generated by the persistence store)</returns>
        PK Create(T newItem);

        /// <summary>
        /// Update an existing object in the persistence store
        /// </summary>
        /// <param name="updatedItem">The updated version of the item</param>
		/// <returns>The persistent reference to the item</returns>
		T Update(T updatedItem);

        /// <summary>
        /// Delete an existing object from the persistence store
        /// </summary>
        /// <param name="itemToRemove">The object to remove</param>
        void Delete(T itemToRemove);

		/// <summary>
		/// Delete the collection of existing objects from the persistence store
		/// </summary>
		/// <param name="itemsToRemove">The collection of objects to remove</param>
		void Delete(IEnumerable<T> itemsToRemove);

        /// <summary>
        /// Fetch the object identified by it's primary key
        /// </summary>
        /// <param name="primaryKey">The primary key of the object</param>
        /// <returns>The object matching the primary key, if one exists</returns>
        T GetById(PK primaryKey);

		/// <summary>
		/// Fetch all of the objects in the persistence store
		/// <para>Caution should be exercised when using this 
		/// function especially on large stores</para>
		/// </summary>
		/// <returns>The collection of instances extracted from the persistence store</returns>
		ICollection<T> GetAll();

		/// <summary>
		/// Delete all entries not contained in the modified list.
		/// <para>All other entries in the persistent store not included
		/// in the modifiedList will be deleted</para>
		/// </summary>
		/// <param name="modifiedList">The list of items to retain</param>
		void DeleteXOREntries(IEnumerable<T> modifiedList);

    }
}
